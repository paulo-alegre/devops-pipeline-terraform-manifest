pipeline{
    agent any
    tools{
        jdk 'java17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }

    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        
        stage('Checkout from Git'){
            steps{
                git branch: 'master', url: 'https://github.com/paulo-alegre/netflix-clone.git'
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix \
                        -Dsonar.projectKey=Netflix '''
                    }   
                 }
        }
        stage("quality gate"){
          steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
                }
            } 
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        

        stage('Files Scanning') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker-credentials', toolName: 'docker'){   
                       sh "docker build --build-arg TMDB_V3_API_KEY=682a6d897e3a8a3c5152af8a9030c49e -t netflix ."
                       sh "docker tag netflix ipau/netflix:latest "
                       sh "docker push ipau/netflix:latest "
                    }
                }
            }
        }
        stage("Scanning Docker Image"){
            steps{
                sh "trivy image ipau/netflix:latest > trivyimage.txt" 
            }
        }


    }
    
}
